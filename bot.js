const { Telegraf, Markup } = require("telegraf");

require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const TeamService = require("./services/TeamService");
const AdminService = require("./services/AdminService");
const fs = require('fs');
const path = require('path');
const locales = require("./data/locales.json");
const prizesFile = path.join(__dirname, './data/prizes.json');
const keyboards = {
  mainMenu: require("./keyboards/mainMenu"),
  pointSelection: require("./keyboards/pointSelection"),
  admin: require("./keyboards/adminKeyboard"),
};
const services = {
  team: new TeamService(),
  admin: new AdminService(),
};

const PENALTIES = {
  BASE_QUESTION_POINTS: 10,  // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
  WRONG_ANSWER: 1,           // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—à–∏–±–∫—É
  TOO_FAST_ANSWER: 3,        // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
  WRONG_CODE: 1,             // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
  MIN_TIME_BETWEEN_ANSWERS: 5 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (71 —Å–µ–∫)
};

// –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const teamOptions = [
  { name: "–ë–µ–∑—É–º—Ü—ã —Å –ø–æ–ø–∫–æ—Ä–Ω–æ–º", id: "team_1" },
  { name: "–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø–ª–∏–∫–∏", id: "team_2" },
  { name: "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ", id: "team_3" },
  { name: "–ö–∏–Ω–æ –ø–æ-–±—Ä–∞—Ç—Å–∫–∏", id: "team_4" },
  { name: "–û—Ñ–∏—Å–Ω—ã–µ –∫–∏–Ω–æ–∫—Ä—ã—Å—ã", id: "team_5" },
  { name: "–¢–∞–π–Ω–∞ –∫–∏–Ω–æ–∫–æ–∫–∞", id: "team_6" },
  { name: "–ö–ª—É–± '–ö—Ä–∞—Å–Ω–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞'", id: "team_7" },
  { name: "–ß—ë—Ä–Ω—ã–µ –∏–∑ —Å—É–º—Ä–∞–∫–∞", id: "team_8" },
  { name: "–•–∞–±–µ–Ω—Å–∫–∏–µ", id: "team_9" },
];


// ======================
// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
// ======================
bot.command("start", handleStart);
bot.command("admin", handleAdminPanel);
bot.action(/^team_/, handleTeamSelection);
bot.action("reset_confirm", handleResetConfirm);
bot.action("reset_cancel", handleResetCancel);
bot.action(/^point_/, handlePointActivation);
bot.action('clear_prizes_confirm', handleClearPrizesConfirm);
bot.action('clear_prizes_cancel', handleClearPrizesCancel);
bot.hears("‚ñ∂ –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç", handleBeginQuest);
bot.hears("üåç –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É", handlePointSelection);
bot.hears("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", handleProgress);
bot.hears("üèÜ –¢–æ–ø –∫–æ–º–∞–Ω–¥", handleTopTeams);
bot.hears("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", handleStats);
bot.hears("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", handleResetConfirmation);
bot.hears("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", handleBroadcast);
bot.hears("üèÜ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø", handleTopTeams);
bot.hears("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", handleMainMenu);
bot.hears("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", handleAdminPanel);
bot.hears("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", handleInfo);
bot.hears('üßπ –ß–∏—Å—Ç–∫–∞ –ø—Ä–∏–∑–æ–≤', handleClearPrizesConfirmation);

bot.use(async (ctx, next) => {
  if (services.team.isTeamRegistered(ctx.chat.id)) {
    ctx.team = services.team.getTeam(ctx.chat.id);

    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ò–õ–ò –∫–æ–º–∞–Ω–¥–∞ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (services.admin.isGameActive || ctx.team.waitingForMembers) {
      return next();
    }
  }

  const infoRoutes = [
    "contact_support", "contact_org", "about_project",
    "show_rules", "show_map", "donate", "visit_site",
    "back_to_info"
  ];

  const exemptRoutes = [
    "/start", "team_", "/admin", "top_", "reset_",
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", "üèÜ –¢–æ–ø –∫–æ–º–∞–Ω–¥"
  ];

  const isInfoRoute = infoRoutes.some(route =>
    ctx.callbackQuery?.data === route
  );

  const isExempt = exemptRoutes.some(
    (route) =>
      ctx.message?.text?.startsWith(route) ||
      ctx.callbackQuery?.data?.startsWith(route)
  ) || isInfoRoute;

  if (
    !isExempt &&
    !services.admin.isGameActive &&
    !services.admin.isAdmin(ctx.from.id)
  ) {
    return ctx.reply(locales.gameNotStarted);
  }

  await next();
});

bot.hears('üèÜ –ú–æ–∏ –ø—Ä–∏–∑—ã', async (ctx) => {
  const team = services.team.getTeam(ctx.chat.id);
  if (!team) return;

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ prizesReceived –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!team.prizesReceived || team.prizesReceived.length === 0) {
    return ctx.reply('üéÅ –£ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.');
  }

  const prizes = team.prizesReceived.map(threshold => {
    const prize = locales.prizes[threshold];
    if (prize) {
      return `üèÜ ${threshold} —Ç–æ—á–µ–∫: ${prize.promoCode} - ${prize.cafeName}`;
    }
    return `üèÜ ${threshold} —Ç–æ—á–µ–∫: –ü—Ä–∏–∑ (–¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)`;
  }).join('\n');

  await ctx.reply(`üéÅ *–í–∞—à–∏ –ø—Ä–∏–∑—ã:*\n\n${prizes}`, { parse_mode: 'Markdown' });
});

bot.hears('üéÅ –í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã', async (ctx) => {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  const prizes = readPrizes();
  if (Object.keys(prizes).length === 0) {
    return ctx.reply('üéÅ –ü—Ä–∏–∑—ã –µ—â–µ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å.');
  }

  const prizeList = Object.entries(prizes).map(([threshold, data]) => {
    return `${threshold} —Ç–æ—á–µ–∫: ${data.teamName} (ID: ${data.chatId}) - ${new Date(data.awardedAt).toLocaleString()}`;
  }).join('\n');

  await ctx.reply(`üéÅ *–í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:*\n\n${prizeList}`, { parse_mode: 'Markdown' });
});

bot.hears(locales.gameStartButton, async (ctx) => {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  const result = services.admin.setGameActive(true);

  await ctx.reply(result.adminMessage);
  await handleAdminPanel(ctx);

  // –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é
  const teams = services.team.getAllTeams();
  for (const team of teams) {
    try {
      const isTeamRegistered = services.team.isTeamRegistered(team.chatId);

      await bot.telegram.sendMessage(
        team.chatId,
        result.broadcastMessage,
        keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(team.chatId),
          true, // isGameActive = true
          isTeamRegistered
        )
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${team.chatId}:`, err);
    }
  }
});

bot.hears(locales.gameStopButton, async (ctx) => {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  const result = services.admin.setGameActive(false);

  await ctx.reply(result.adminMessage);
  await handleAdminPanel(ctx);

  // –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é
  const teams = services.team.getAllTeams();
  for (const team of teams) {
    try {
      const isTeamRegistered = services.team.isTeamRegistered(team.chatId);

      await bot.telegram.sendMessage(
        team.chatId,
        result.broadcastMessage,
        keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(team.chatId),
          false, // isGameActive = false
          isTeamRegistered
        )
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${team.chatId}:`, err);
    }
  }
});

// ======================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// ======================
bot.on("text", async (ctx) => {
  if (ctx.team?.waitingForMembers) {
    return handleMembersInput(ctx);
  }
  if (ctx.team?.waitingForBroadcast) {
    return handleBroadcastMessage(ctx);
  }
  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  if (ctx.team?.currentPoint !== null && ctx.team?.currentPoint !== undefined &&
    ctx.team.currentQuestion === 0 && ctx.team.totalQuestions === 0) {
    return handlePointCode(ctx);
  }
  if (ctx.team?.currentPoint !== null && ctx.team?.currentPoint !== undefined) {
    const questions = require("./data/questions.json");
    const point = questions.find((p) => p.pointId === ctx.team.currentPoint);

    if (point && point.questions[ctx.team.currentQuestion]) {
      const question = point.questions[ctx.team.currentQuestion];

      if (!Array.isArray(question.options)) {
        const hasPenalty = await checkTimePenalty(ctx, ctx.team.currentQuestion);
        const isCorrect = services.team.verifyAnswer(
          ctx.team.currentPoint,
          ctx.team.currentQuestion,
          ctx.message.text
        );

        await processQuestionAnswer(ctx, isCorrect, {
          questionIndex: ctx.team.currentQuestion,
          point,
          hasPenalty
        });
        return;
      }
    }
  }
});

bot.action("contact_org", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏: @GeekLS");
});

bot.action("contact_support", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏:*\n@GeekLS\n+7 (978) 7975 939",
    {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
      ])
    }
  );
});

bot.action("visit_site", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "üåê –ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç: https://ulysses-club.github.io/odissea/",
    Markup.inlineKeyboard([
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
    ])
  );
});

bot.action("show_rules", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "üé¨ *–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∏–Ω–æ–∫–≤–µ—Å—Ç–∞ ¬´Odissea¬ª*\n\n" +
    "üéØ *–¶–µ–ª—å –∏–≥—Ä—ã:* –ù–∞–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—Ö–æ–¥—è –∫–æ–¥—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –≤ –≥–æ—Ä–æ–¥–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n" +
    "‚ö†Ô∏è *–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:* –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è—Ö ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –Ω–∞ —Ç–æ—á–∫–µ, –∫–∞—Ä–∞—é—Ç—Å—è —à—Ç—Ä–∞—Ñ–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏.\n\n" +

    "üß≠ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n\n" +
    "1Ô∏è‚É£ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã*\n" +
    "‚Äì –ù–∞–∂–º–∏—Ç–µ /start\n" +
    "‚Äì –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä—É—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n" +
    "‚Äì –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–æ–Ω–∏, –í–∞–¥–∏–º, –û—Ç–µ—Ü)\n\n" +

    "2Ô∏è‚É£ *–í—ã–±–æ—Ä –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏*\n" +
    "‚Äì –û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç –æ—Ç –∞–¥–º–∏–Ω–æ–≤: *¬´üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–µ–∫!¬ª*\n" +
    "‚Äì –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ¬´üåç –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É¬ª\n" +
    "‚Äì –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π. –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±—É—é! (–ü–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–ø–∞–¥–∞–µ—Ç)\n" +
    "‚Äì –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏, –∑–∞–≥–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–∞—Ä—Ç–∞—Ö\n" +
    "‚Äì –í–∞—à–∞ –∑–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–æ–¥ (–Ω–∞–¥–ø–∏—Å—å, —Ü–∏—Ñ—Ä—É, –ø—Ä–µ–¥–º–µ—Ç)\n" +
    "‚Äì –ù–∞–π–¥—è –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç\n\n" +

    "3Ô∏è‚É£ *–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã*\n" +
    "‚Äì –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ–º–æ–π –ª–æ–∫–∞—Ü–∏–∏\n" +
    "‚Äì –í–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å:\n" +
    "   ‚Ä¢ –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ ‚Üí –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º\n" +
    "   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–º ‚Üí –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é\n" +
    "‚Äì *–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤:*\n" +
    "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –æ—Ç 1 –¥–æ 10 –±–∞–ª–ª–æ–≤\n" +
    "   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: -3 –±–∞–ª–ª–∞ (–º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞)\n" +
    "   ‚Ä¢ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (< ~n —Å–µ–∫): -3 –±–∞–ª–ª–∞ (–≤—ã –Ω–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏!)\n\n" +

    "4Ô∏è‚É£ *–ú–∏–Ω–∏-–∫–≤–µ—Å—Ç—ã*\n" +
    "‚Äì –ù–∞–∂–º–∏—Ç–µ ¬´üé≤ –ú–∏–Ω–∏-–∫–≤–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–º–∞—Ç–∏–∫–µ...¬ª)\n" +
    "‚Äì –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç\n" +
    "‚Äì –ù–∞–≥—Ä–∞–¥–∞: +5 –±–∞–ª–ª–æ–≤ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞\n\n" +

    "üìä *–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –ø–æ–º–æ—â—å:*\n" +
    "‚Äì ¬´üìä –ü—Ä–æ–≥—Ä–µ—Å—Å¬ª: –≤–∞—à —Å—á—ë—Ç, –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏, –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ\n" +
    "‚Äì ¬´üèÜ –¢–æ–ø –∫–æ–º–∞–Ω–¥¬ª: —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n" +
    "‚Äì ¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª: –ø—Ä–∞–≤–∏–ª–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤, –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n" +

    "üí° *–í–∞–∂–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n" +
    "‚Äì –ù–µ —Å–ø–µ—à–∏—Ç–µ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º ‚Äî —Å–ø–µ—à–∫–∞ = —à—Ç—Ä–∞—Ñ—ã\n" +
    "‚Äì –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≥–∞–¥–∫—É ‚Äî —Ç–∞–º –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏\n" +
    "‚Äì –î—É–º–∞–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏. –û—Ç–≤–µ—Ç —á–∞—Å—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–µ—Ç–∞–ª–µ–π –ª–æ–∫–∞—Ü–∏–∏\n" +
    "‚Äì –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ! –û–±—Å—É–∂–¥–∞–π—Ç–µ, –∏—â–∏—Ç–µ –≤–º–µ—Å—Ç–µ\n\n" +

    "‚öñÔ∏è *–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:*\n" +
    "‚Äì –ë–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: –¥–æ 10 –±–∞–ª–ª–æ–≤\n" +
    "‚Äì –®—Ç—Ä–∞—Ñ –∑–∞ –æ—à–∏–±–∫—É: -1 –±–∞–ª–ª\n" +
    "‚Äì –®—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: -3 –±–∞–ª–ª–∞\n" +
    "‚Äì –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: -1 –±–∞–ª–ª\n" +
    "‚Äì –ú–∏–Ω–∏–º—É–º –∑–∞ –≤–æ–ø—Ä–æ—Å: 1 –±–∞–ª–ª\n\n" +

    "üåü *–£–¥–∞—á–∏ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏! –ü—É—Å—Ç—å —Å–∏–ª–∞ (–∏ —Ö–æ—Ä–æ—à–µ–µ –∫–∏–Ω–æ) –±—É–¥—É—Ç —Å –≤–∞–º–∏!* üé•",
    {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
      ])
    }
  );
});

bot.action(/^show_map_/, async (ctx) => {
  const pointId = parseInt(ctx.callbackQuery.data.split("_")[2]);
  const questions = require("./data/questions.json");
  const point = questions.find((p) => p.pointId === pointId);

  if (point && point.coordinates) {
    await ctx.replyWithLocation(point.coordinates.lat, point.coordinates.lng, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps",
              url: `https://maps.google.com/?q=${point.coordinates.lat},${point.coordinates.lng}`,
            },
          ],
          [
            {
              text: "üìç –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
              url: `https://yandex.ru/maps/?pt=${point.coordinates.lng},${point.coordinates.lat}&z=17&l=map`,
            },
          ],
        ],
      },
    });
  }
});

bot.action("show_map", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await ctx.replyWithPhoto(
      { source: "./assets/map.jpg" },
      {
        caption: locales.mapMessage,
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
        ])
      }
    );
  } catch (error) {
    console.error("Error sending map:", error);
    await ctx.reply("‚ùå –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.action("donate", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await ctx.replyWithPhoto(
      { source: "./assets/donat/qr_code.jpg" },
      {
        caption: locales.donateMessage,
        ...Markup.inlineKeyboard([
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
        ])
      }
    );
  } catch (error) {
    console.error("Error sending QR code:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
bot.action("copy_card_number", async (ctx) => {
  await ctx.answerCbQuery("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
bot.action("back_to_info", async (ctx) => {
  await ctx.answerCbQuery();
  await handleInfo(ctx);
});

bot.action("about_project", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(locales.aboutUs, {
    parse_mode: "Markdown",
    ...Markup.inlineKeyboard([
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
    ])
  });
});

bot.command("donate", async (ctx) => {
  try {
    await ctx.replyWithPhoto(
      { source: "./assets/donat/qr_code.jpg" },
      {
        caption: locales.donateMessage,
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]
        ])
      }
    );
  } catch (error) {
    console.error("Error sending QR code:", error);
  }
});

bot.action(/^answer_/, async (ctx) => {
  try {
    await handleQuestionAnswer(ctx);
  } catch (error) {
    console.error("Error handling question answer:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
  }
});

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
 * 
 * @description
 * –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –∏ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
 * –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
 */
async function handleStart(ctx) {
  if (services.team.isTeamRegistered(ctx.chat.id)) {
    const team = services.team.getTeam(ctx.chat.id);
    const isGameActive = services.admin.isGameActive;
    const isTeamRegistered = services.team.isTeamRegistered(ctx.chat.id);

    if (team.waitingForMembers) {
      return ctx.reply(locales.addMembers, Markup.removeKeyboard());
    }

    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    return ctx.reply(
      locales.alreadyRegistered,
      keyboards.mainMenu.getKeyboard(
        services.admin.isAdmin(ctx.from.id),
        isGameActive,
        isTeamRegistered,
        team.waitingForMembers
      )
    );
  }

  const teamButtons = teamOptions.map((team) =>
    Markup.button.callback(team.name, team.id)
  );

  await ctx.reply(
    locales.welcomeMessage,
    Markup.inlineKeyboard(teamButtons, { columns: 2 })
  );
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @param {Object} team ‚Äî –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª–µ–º startTime.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
 * 
 * @description
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É startTime –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
 */
async function showCompletionTime(ctx, team) {
  const startTime = new Date(team.startTime);
  const endTime = new Date();
  const duration = endTime - startTime;
  const hours = Math.floor(duration / 3600000);
  const minutes = Math.floor((duration % 3600000) / 60000);

  await ctx.reply(
    `üéâ *–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n‚è± –í–∞—à–µ –≤—Ä–µ–º—è: ${hours}—á ${minutes}–º`,
    { parse_mode: 'Markdown' }
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /info ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏.
 * 
 * @description
 * –í–∫–ª—é—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞, –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–∞–≤–∏–ª, –∫–∞—Ä—Ç—ã –∏ –¥–æ–Ω–∞—Ç–∞.
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ.
 */
async function handleInfo(ctx) {
  try {
    const isFromMainMenu = !ctx.callbackQuery; // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –∞ –Ω–µ –ø–æ callback

    const keyboardButtons = [
      [
        { text: "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "contact_support" },
        { text: "üåê –°–∞–π—Ç", url: "https://ulysses-club.github.io/odissea/" },
      ],
      [
        { text: "üé¨ –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data: "about_project" },
        { text: "üìä –ü—Ä–∞–≤–∏–ª–∞", callback_data: "show_rules" },
      ],
      [
        { text: locales.mapButton, callback_data: "show_map" },
        { text: locales.donateButton, callback_data: "donate" }
      ]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (!isFromMainMenu) {
      keyboardButtons.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_info" }]);
    }

    await ctx.replyWithPhoto(
      {
        source: "./assets/donat/logo.jpg",
      },
      {
        caption: locales.infoMessage,
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard(keyboardButtons),
      }
    );
  } catch (error) {
    console.error("Error in handleInfo:", error);
    await ctx.reply(locales.infoMessage, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [
          { text: "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "contact_support" },
          { text: "üåê –°–∞–π—Ç", url: "https://ulysses-club.github.io/odissea/" },
        ],
        [
          { text: "üé¨ –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data: "about_project" },
          { text: "üìä –ü—Ä–∞–≤–∏–ª–∞", callback_data: "show_rules" },
        ],
        [
          { text: locales.mapButton, callback_data: "show_map" },
          { text: locales.donateButton, callback_data: "donate" }
        ]
      ]),
    });
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫—É.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–æ.
 * 
 * @description
 * –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
 */
async function handleTeamSelection(ctx) {
  const selectedTeam = teamOptions.find(
    (team) => team.id === ctx.callbackQuery.data
  );
  if (!selectedTeam) {
    return ctx.reply(locales.teamSelectionError);
  }

  if (!services.team.isTeamNameAvailable(selectedTeam.name)) {
    return ctx
      .reply(
        `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${selectedTeam.name}" —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`,
        Markup.removeKeyboard()
      )
      .then(() => handleStart(ctx));
  }

  const team = services.team.registerTeam(
    ctx.chat.id,
    selectedTeam.name,
    ctx.from.id
  );

  await ctx.reply(
    locales.teamRegistered.replace("%s", selectedTeam.name),
    Markup.removeKeyboard()
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  services.team.updateTeam(ctx.chat.id, {
    waitingForMembers: true,
    waitingForBroadcast: false,
  });

  await ctx.reply(
    locales.addMembers,
    keyboards.mainMenu.getKeyboard(
      services.admin.isAdmin(ctx.from.id),
      services.admin.isGameActive,
      true, // isTeamRegistered = true
      true  // waitingForMembers = true
    )
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∫–≤–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.
 */
async function handleBeginQuest(ctx) {
  // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
  if (!services.admin.isGameActive && !services.admin.isAdmin(ctx.from.id)) {
    return ctx.reply(locales.gameNotStarted);
  }

  await ctx.reply(
    locales.startQuest,
    keyboards.mainMenu.getKeyboard(
      services.admin.isAdmin(ctx.from.id),
      services.admin.isGameActive
    )
  );
}

/**
 * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.
 * 
 * @description
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.
 */
async function handlePointSelection(ctx) {
  const questions = require("./data/questions.json");
  const team = services.team.getTeam(ctx.chat.id);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
  const availablePoints = [...new Set(questions.map((q) => q.pointId))].filter(
    (p) => !team?.completedPoints?.includes(p)
  );

  if (availablePoints.length === 0) {
    return ctx.reply(locales.noPointsAvailable);
  }

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫
  const pointButtons = availablePoints.map(pointId => {
    const pointDescription = keyboards.pointSelection.getPointDescription(pointId);
    return Markup.button.callback(
      `${pointDescription}`,
      `point_${pointId}`
    );
  });

  await ctx.reply(
    locales.selectPoint,
    Markup.inlineKeyboard(pointButtons, { columns: 1 })
  );
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.
 * 
 * @description
 * –í–∞–∂–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç pointActivationTime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.
 */
async function handlePointActivation(ctx) {
  const pointId = parseInt(ctx.callbackQuery.data.split("_")[1]);
  const questions = require("./data/questions.json");
  const point = questions.find((p) => p.pointId === pointId);

  try {
    await ctx.replyWithPhoto({ source: `./assets/point_${pointId}.jpg` });
  } catch (err) {
    console.log("–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –∫–æ–¥–∞
  const formattedMessage =
    `üé¨ *${keyboards.pointSelection.getPointDescription(pointId)}*\n\n` +
    `üìç ${point.description}\n\n` +
    `üîç *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∫–æ–¥–∞:*\n` +
    `${point.locationHint}\n\n` +
    `üìù *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:*`;

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationKeyboard = keyboards.pointSelection.getNavigationKeyboard(pointId);

  if (navigationKeyboard) {
    await ctx.reply(formattedMessage, {
      parse_mode: "Markdown",
      ...navigationKeyboard,
    });
  } else {
    await ctx.reply(formattedMessage, {
      parse_mode: "Markdown",
    });
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
  // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  services.team.updateTeam(ctx.chat.id, {
    currentPoint: pointId,
    currentQuestion: 0,
    totalQuestions: 0,
    waitingForMembers: false,
    waitingForBroadcast: false,
    lastAnswerTime: null,
    pointActivationTime: new Date().toISOString() // –í–∞–∂–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  });
}

const questions = require("./data/questions.json");

questions.forEach((question) => {
  const hint = question.locationHint.toLowerCase();
  const code = question.code.toLowerCase();

  if (!hint.includes(code) && !hint.includes("–æ—Ç–≤–µ—Ç")) {
    console.warn(
      `‚ö†Ô∏è –¢–æ—á–∫–∞ ${question.pointId}: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Ç–≤–µ—Ç`
    );
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—á–∫–∏.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –µ—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —à—Ç—Ä–∞—Ñ.
 * 
 * @description
 * –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç askQuestion.
 */
async function handlePointCode(ctx) {
  const code = ctx.message.text.trim();
  const team = ctx.team;

  if (services.team.verifyCode(team.currentPoint, code)) {
    // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    const questions = require("./data/questions.json");
    const point = questions.find((p) => p.pointId === team.currentPoint);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    services.team.updateTeam(ctx.chat.id, {
      currentQuestion: 0,
      totalQuestions: point.questions.length,
      lastAnswerTime: new Date().toISOString(),
      pointActivationTime: new Date().toISOString() // –í–∞–∂–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    });
    await askQuestion(ctx, 0);
  } else {
    // –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π - –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
    services.team.addPoints(ctx.chat.id, -PENALTIES.WRONG_CODE);
    await ctx.reply(
      locales.wrongCodePenalty.replace("%d", PENALTIES.WRONG_CODE),
      { parse_mode: "Markdown" }
    );
  }
}

/**
 * –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–µ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏).
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @param {number} questionIndex ‚Äî –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–∞—Å—Å–∏–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–æ—á–∫–∏.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã).
 * 
 * @description
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å.
 */
async function askQuestion(ctx, questionIndex) {
  const questions = require("./data/questions.json");
  const point = questions.find((p) => p.pointId === ctx.team.currentPoint);

  if (!point || !point.questions[questionIndex]) {
    return ctx.reply(locales.questionNotFound);
  }

  const question = point.questions[questionIndex];

  const key = `${ctx.team.currentPoint}_${questionIndex}`;
  const currentPoints = ctx.team.questionPoints?.[key] || 10;

  // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
  if (Array.isArray(question.options)) {
    const options = question.options.map((option, i) =>
      Markup.button.callback(option, `answer_${questionIndex}_${i}`)
    );

    await ctx.reply(
      locales.questionTemplate
        .replace("%d", questionIndex + 1)
        .replace("%d", point.questions.length)
        .replace("%s", question.text) +
      `\n\n*–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: ${currentPoints}*`,
      Markup.inlineKeyboard(options, { columns: 1 })
    );
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ctx.reply(
      locales.questionTemplate
        .replace("%d", questionIndex + 1)
        .replace("%d", point.questions.length)
        .replace("%s", question.text) +
      `\n\n*–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: ${currentPoints}*\n\n` +
      `üìù *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:*`,
      { parse_mode: "Markdown" }
    );
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (—á–µ—Ä–µ–∑ callback).
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã, –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã.
 * 
 * @description
 * –í—ã–∑—ã–≤–∞–µ—Ç processQuestionAnswer –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏.
 */
async function handleQuestionAnswer(ctx) {
  const [_, questionIndex, answerIndex] = ctx.callbackQuery.data
    .split("_")
    .map(Number);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–µ
  const questions = require("./data/questions.json");
  const point = questions.find((p) => p.pointId === ctx.team.currentPoint);

  if (!point) {
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
  const hasPenalty = await checkTimePenalty(ctx, questionIndex);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–ø–µ—Ä–µ–¥–∞–µ–º answerIndex –∫–∞–∫ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É)
  const isCorrect = services.team.verifyAnswer(
    ctx.team.currentPoint,
    questionIndex,
    answerIndex // –ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
  );

  await processQuestionAnswer(ctx, isCorrect, {
    questionIndex,
    point,
    hasPenalty
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
  await ctx.answerCbQuery();
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã: —É—á–∞—Å—Ç–Ω–∏–∫–∏, –±–∞–ª–ª—ã, –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏, –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
 * 
 * @description
 * –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
 */
async function handleProgress(ctx) {
  const progress = services.team.getTeamProgress(ctx.chat.id);
  if (!progress) return;

  let completionInfo = '';
  if (progress.completionTime) {
    const completionDate = new Date(progress.completionTime);
    completionInfo = `\nüèÅ *–ó–∞–≤–µ—Ä—à–∏–ª:* ${completionDate.toLocaleString()}`;
  }

  const message = [
    `üèÜ *–ö–æ–º–∞–Ω–¥–∞:* ${progress.teamName}`,
    `üë§ *–ö–∞–ø–∏—Ç–∞–Ω:* ${ctx.from.first_name} ${ctx.from.last_name || ""}`,
    `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* ${progress.members.join(", ") || "–Ω–µ—Ç"}`,
    `üìä *–ë–∞–ª–ª—ã:* ${progress.points}`,
    `üìç *–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫:* ${progress.completedPoints.length}/${progress.totalPoints}`,
    `‚è± *–í –∏–≥—Ä–µ:* ${progress.timeInGame}`,
    `üïí *–°—Ç–∞—Ä—Ç:* ${new Date(progress.startTime).toLocaleString()}`,
    completionInfo
  ].join("\n");

  await ctx.reply(message, { parse_mode: "Markdown" });
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø –∫–æ–º–∞–Ω–¥ –ø–æ –±–∞–ª–ª–∞–º.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-–∫–æ–º–∞–Ω–¥.
 * 
 * @description
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç services.admin.getTopTeams.
 */
async function handleTopTeams(ctx) {
  const topTeams = services.admin.getTopTeams(
    services.team.getAllTeams(),
    true
  );
  await ctx.reply(topTeams, { parse_mode: "Markdown" });
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω.
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ services.admin.isAdmin.
 */
async function handleAdminPanel(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  ctx.reply(locales.adminPanel, {
    ...keyboards.admin.getKeyboard(services.admin.getGameStatus()),
    parse_mode: "Markdown",
  });
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Markdown.
 * 
 * @description
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç services.admin.getFullStats.
 */
async function handleStats(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  const stats = await services.admin.getFullStats(services.team.getAllTeams());
  ctx.reply(stats, { parse_mode: "Markdown" });
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã.
 * 
 * @description
 * –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
 */
async function handleResetConfirmation(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  ctx.reply(locales.resetConfirm, {
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback("‚úÖ –î–∞", "reset_confirm")],
        [Markup.button.callback("‚ùå –ù–µ—Ç", "reset_cancel")],
      ],
    },
    parse_mode: "Markdown",
  });
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ waitingForBroadcast –∏ —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
 * 
 * @description
 * –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
 */
async function handleBroadcast(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
  services.team.updateTeam(ctx.chat.id, {
    waitingForBroadcast: true,
    waitingForMembers: false,
  });

  await ctx.reply(locales.broadcastPrompt, Markup.removeKeyboard());
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏.
 * 
 * @description
 * –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ waitingForBroadcast.
 */
async function handleBroadcastMessage(ctx) {
  const team = services.team.getTeam(ctx.chat.id);
  if (!team?.waitingForBroadcast) return;

  const teams = services.team.getAllTeams();
  const message = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  if (teams.length === 0) {
    await ctx.reply("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏");
    services.team.updateTeam(ctx.chat.id, {
      waitingForBroadcast: false,
    });
    return;
  }

  let successCount = 0;
  let failedCount = 0;
  const failedTeams = []; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
  const adminIds = services.admin.admins.map(id => Number(id));

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–∞–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  const teamsToNotify = teams.filter(team => {
    const teamChatId = Number(team.chatId);
    const senderChatId = Number(ctx.chat.id);

    // –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ò —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—á—Ç–æ–±—ã –∞–¥–º–∏–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª —Å–≤–æ—é –∂–µ —Ä–∞—Å—Å—ã–ª–∫—É)
    return !adminIds.includes(teamChatId) && teamChatId !== senderChatId;
  });

  if (teamsToNotify.length === 0) {
    await ctx.reply("‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)");
    services.team.updateTeam(ctx.chat.id, {
      waitingForBroadcast: false,
    });
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  for (const team of teamsToNotify) {
    try {
      await bot.telegram.sendMessage(
        team.chatId,
        `üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n${message}`,
        { parse_mode: 'Markdown' }
      );
      successCount++;

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram
      await new Promise(resolve => setTimeout(resolve, 100));

    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${team.teamName} (${team.chatId}):`, err.message);
      failedCount++;
      failedTeams.push({
        name: team.teamName,
        chatId: team.chatId,
        error: err.message
      });
    }
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
  services.team.updateTeam(ctx.chat.id, {
    waitingForBroadcast: false,
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  let reportMessage = `üìä *–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:*\n\n`;
  reportMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} –∏–∑ ${teamsToNotify.length} –∫–æ–º–∞–Ω–¥\n`;
  reportMessage += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failedCount} –∫–æ–º–∞–Ω–¥\n\n`;

  if (failedCount > 0) {
    reportMessage += `*–ö–æ–º–∞–Ω–¥—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;
    failedTeams.forEach((team, index) => {
      reportMessage += `${index + 1}. ${team.name} (ID: ${team.chatId}) - ${team.error}\n`;
    });
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await ctx.reply(
    reportMessage,
    {
      parse_mode: 'Markdown',
      ...keyboards.admin.getKeyboard(services.admin.getGameStatus())
    }
  );
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 */
async function handleMainMenu(ctx) {
  ctx.reply(locales.mainMenu, keyboards.mainMenu.getKeyboard());
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö –∏ –∞–¥–º–∏–Ω–æ–≤.
 * 
 * @description
 * –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤. –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ —Å–±—Ä–æ—Å–µ.
 */
async function handleResetConfirm(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  const result = services.admin.resetAllTeams(services.team);
  await ctx.reply(result.message, { parse_mode: "Markdown" });

  for (const chatId of result.affectedChatIds) {
    try {
      await bot.telegram.sendMessage(
        chatId,
        locales.resetNotification,
        Markup.removeKeyboard()
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${chatId}:`, err);
    }
  }

  await handleAdminPanel(ctx);
}

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç —Å–±—Ä–æ—Å –∫–æ–º–∞–Ω–¥.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
 * 
 * @description
 * –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
 */
async function handleResetCancel(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  await ctx.reply(locales.resetCanceled);
  await handleAdminPanel(ctx);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @returns {Promise<void>} ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * 
 * @description
 * –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏.
 */
async function handleMembersInput(ctx) {
  const members = ctx.message.text
    .split(",")
    .map((name) => name.trim())
    .filter((name) => name.length > 0);

  services.team.updateTeam(ctx.chat.id, {
    members,
    waitingForMembers: false,
  });

  const isTeamRegistered = services.team.isTeamRegistered(ctx.chat.id);

  await ctx.reply(
    locales.membersAdded.replace("%s", members.join(", ")),
    keyboards.mainMenu.getKeyboard(
      services.admin.isAdmin(ctx.from.id),
      services.admin.isGameActive,
      isTeamRegistered,
      false  // waitingForMembers = false
    )
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–∏—Å–ª—è–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç –±–∞–ª–ª—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @param {boolean} isCorrect ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç.
 * @param {Object} options ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: questionIndex, point, hasPenalty.
 * @returns {Promise<void>} ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ —Ç–æ—á–∫–µ.
 * 
 * @description
 * –ü—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–æ—á–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞, –≤—ã–¥–∞–µ—Ç –ø—Ä–∏–∑—ã.
 */
async function processQuestionAnswer(ctx, isCorrect, options) {
  const { questionIndex, point } = options;

  const key = `${ctx.team.currentPoint}_${questionIndex}`;
  const currentPoints = ctx.team.questionPoints?.[key] || PENALTIES.BASE_QUESTION_POINTS;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –í–°–ï–• –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–π)
  const hasPenalty = await checkTimePenalty(ctx, questionIndex);
  services.team.updateLastAnswerTime(ctx.chat.id, new Date().toISOString());

  if (isCorrect) {
    let pointsToAdd = currentPoints;
    let penaltyMessage = "";

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –õ–Æ–ë–û–ì–û –≤–æ–ø—Ä–æ—Å–∞
    if (hasPenalty.hasPenalty) {
      const penalty = PENALTIES.TOO_FAST_ANSWER;
      pointsToAdd = Math.max(1, currentPoints - penalty); // –ú–∏–Ω–∏–º—É–º 1 –±–∞–ª–ª
      penaltyMessage = ` (${currentPoints}-${penalty} –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å)`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–µ
      await ctx.reply(getRandomTooFastMessage(), { parse_mode: "Markdown" });

      // –û–ë–ù–û–í–õ–Ø–ï–ú —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —à—Ç—Ä–∞—Ñ–∞
      services.team.updateQuestionPoints(
        ctx.chat.id,
        ctx.team.currentPoint,
        questionIndex,
        -penalty
      );
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã (—É–∂–µ —Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞)
    services.team.addPoints(ctx.chat.id, pointsToAdd);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    await ctx.reply(locales.correctAnswer.replace("%d", pointsToAdd) + penaltyMessage);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—á–∫–∏
    if (questionIndex < point.questions.length - 1) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      services.team.updateTeam(ctx.chat.id, {
        currentQuestion: questionIndex + 1,
      });
      await askQuestion(ctx, questionIndex + 1);
    } else {
      // –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ—á–∫—É
      const completedPointId = services.team.completePoint(
        ctx.chat.id,
        ctx.team.currentPoint
      );

      const updatedTeam = services.team.getTeam(ctx.chat.id);

      await ctx.reply(
        locales.pointCompleted
          .replace("%d", completedPointId)
          .replace("%d", updatedTeam.points),
        keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(ctx.from.id),
          services.admin.isGameActive,
          true, // isTeamRegistered
          false // waitingForMembers
        )
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å –∫–≤–µ—Å—Ç
      const questions = require("./data/questions.json");
      const totalPoints = [...new Set(questions.map(q => q.pointId))].length;

      if (updatedTeam.completedPoints.length >= totalPoints) {
        // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        services.team.setCompletionTime(ctx.chat.id);
        await showCompletionTime(ctx, updatedTeam);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        await services.admin.notifyAdminAboutCompletion(updatedTeam, totalPoints);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç
        const allTeams = services.team.getAllTeams();
        if (services.admin.checkAllTeamsCompleted(allTeams, totalPoints)) {
          // –†–∞—Å—Å—ã–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await services.admin.notifyAllTeamsAboutGlobalCompletion(bot, allTeams);

          // –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          for (const adminId of services.admin.admins) {
            try {
              await bot.telegram.sendMessage(
                adminId,
                "üéâ *–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç!* –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                { parse_mode: 'Markdown' }
              );
            } catch (err) {
              console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, err);
            }
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –ø—Ä–∏–∑—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) - –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ—á–∫–∏
      await checkAndAwardPrizes(ctx, ctx.chat.id, updatedTeam.completedPoints.length);
    }
  } else {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    services.team.addPoints(ctx.chat.id, -PENALTIES.WRONG_ANSWER);
    await ctx.reply(
      getRandomWrongAnswerMessage(),
      {
        parse_mode: "Markdown",
        ...keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(ctx.from.id),
          services.admin.isGameActive,
          true, // isTeamRegistered
          false // waitingForMembers
        )
      }
    );

    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    services.team.updateQuestionPoints(
      ctx.chat.id,
      ctx.team.currentPoint,
      questionIndex,
      -2 // –°–Ω–∏–∂–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    );

    await askQuestion(ctx, questionIndex);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (–º–µ–Ω—å—à–µ MIN_TIME_BETWEEN_ANSWERS —Å–µ–∫—É–Ω–¥).
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @param {number} questionIndex ‚Äî –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
 * @returns {Promise<{hasPenalty: boolean, timeDiff: number}>} ‚Äî –æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–æ–º —à—Ç—Ä–∞—Ñ–∞ –∏ —Ä–∞–∑–Ω–∏—Ü–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
 * 
 * @description
 * –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç pointActivationTime, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî lastAnswerTime.
 */
async function checkTimePenalty(ctx, questionIndex) {
  let referenceTime;

  if (questionIndex === 0) {
    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—á–∫–∏
    referenceTime = new Date(ctx.team.pointActivationTime);
  } else {
    // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    referenceTime = new Date(ctx.team.lastAnswerTime || ctx.team.pointActivationTime);
  }

  const now = new Date();
  const timeDiff = (now - referenceTime) / 1000; // –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  // –®—Ç—Ä–∞—Ñ—É–µ–º –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
  return {
    hasPenalty: timeDiff < PENALTIES.MIN_TIME_BETWEEN_ANSWERS,
    timeDiff: timeDiff
  };
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–º –æ—Ç–≤–µ—Ç–µ.
 * 
 * @returns {string} ‚Äî –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ locales.penaltyMessages.tooFast.
 */
function getRandomTooFastMessage() {
  return locales.penaltyMessages.tooFast[
    Math.floor(Math.random() * locales.penaltyMessages.tooFast.length)
  ];
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ.
 * 
 * @returns {string} ‚Äî –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ locales.penaltyMessages.wrongAnswer.
 */
function getRandomWrongAnswerMessage() {
  return locales.penaltyMessages.wrongAnswer[
    Math.floor(Math.random() * locales.penaltyMessages.wrongAnswer.length)
  ];
}

/**
 * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞ prizes.json.
 * 
 * @returns {Object} ‚Äî –æ–±—ä–µ–∫—Ç —Å –≤—ã–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ—á–µ–∫.
 * 
 * @description
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç. –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
 */
function readPrizes() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const dirPath = path.dirname(prizesFile);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(prizesFile)) {
      fs.writeFileSync(prizesFile, '{}');
      return {};
    }

    const data = fs.readFileSync(prizesFile, 'utf8');
    const prizes = JSON.parse(data);
    return prizes && typeof prizes === 'object' ? prizes : {};
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è prizes.json:', err);
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∏—Å—Ç—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      fs.writeFileSync(prizesFile, '{}');
    } catch (writeErr) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è prizes.json:', writeErr);
    }
    return {};
  }
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö –≤ —Ñ–∞–π–ª prizes.json.
 * 
 * @param {Object} data ‚Äî –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–∏–∑–∞—Ö.
 * 
 * @description
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
 */
function writePrizes(data) {
  try {
    fs.writeFileSync(prizesFile, JSON.stringify(data, null, 2));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ prizes.json:', err);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞, –∏ –≤—ã–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–¥–∞–Ω.
 * 
 * @param {Object} ctx ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞.
 * @param {number} chatId ‚Äî ID —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.
 * @param {number} completedPointsCount ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫.
 * @returns {Promise<void>} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–µ –∏ –∞–¥–º–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ –∫–∞—Ä—Ç–∞–º–∏.
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ ‚Äî –ø—Ä–∏–∑ –∑–∞ N —Ç–æ—á–µ–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (Google Maps, –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, 2GIS).
 */
async function checkAndAwardPrizes(ctx, chatId, completedPointsCount) {
  const team = services.team.getTeam(chatId);
  if (!team) return;

  const thresholds = [1, 4, 8, 10];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ—Ä–æ–≥–æ–≤ –ø—Ä–∏–∑–æ–≤
  if (!thresholds.includes(completedPointsCount)) {
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–∏–∑
  if (services.team.hasPrize(chatId, completedPointsCount)) {
    console.log(`–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –ø–æ–ª—É—á–∞–ª–∞ –ø—Ä–∏–∑ –∑–∞ ${completedPointsCount} —Ç–æ—á–µ–∫`);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–∏–∑ —É–∂–µ –≤—ã–¥–∞–Ω –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
  const prizes = readPrizes();
  if (prizes[completedPointsCount]) {
    console.log(`–ü—Ä–∏–∑ –∑–∞ ${completedPointsCount} —Ç–æ—á–µ–∫ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω –∫–æ–º–∞–Ω–¥–µ ${prizes[completedPointsCount].awardedTo}`);
    return; // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ —É–≤–µ–¥–æ–º–ª—è—è –∫–æ–º–∞–Ω–¥—É
  }

  const prizeConfig = locales.prizes[completedPointsCount];
  if (!prizeConfig) {
    console.log(`–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–∞ –¥–ª—è ${completedPointsCount} —Ç–æ—á–µ–∫`);
    return;
  }

  // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–∑ –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω –Ω–∏–∫–æ–º—É
  services.team.addPrize(chatId, completedPointsCount);

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–∑–æ–≤
  prizes[completedPointsCount] = {
    awardedTo: team.teamName,
    awardedToChatId: chatId,
    awardedAt: new Date().toISOString()
  };
  writePrizes(prizes);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
  const message = locales.prizeMessage
    .replace('%d', completedPointsCount)
    .replace('%s', prizeConfig.promoCode)
    .replace('%s', prizeConfig.cafeName)
    .replace('%s', prizeConfig.address);

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.url(
        'üó∫Ô∏è Google Maps',
        `https://maps.google.com/?q=${prizeConfig.coordinates.lat},${prizeConfig.coordinates.lng}`
      ),
      Markup.button.url(
        'üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã',
        `https://yandex.ru/maps/?pt=${prizeConfig.coordinates.lng},${prizeConfig.coordinates.lat}&z=17&l=map`
      )
    ],
    [
      Markup.button.url(
        'üì± 2GIS',
        `https://2gis.ru/geo/${prizeConfig.coordinates.lng},${prizeConfig.coordinates.lat}`
      )
    ]
  ]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∫–æ–º–∞–Ω–¥–µ-–ø–æ–ª—É—á–∞—Ç–µ–ª—é
  try {
    await bot.telegram.sendMessage(
      chatId,
      message,
      {
        parse_mode: 'Markdown',
        ...keyboard
      }
    );
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞ –∫–æ–º–∞–Ω–¥–µ ${chatId}:`, err);
  }

  // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
  const admins = services.admin.admins;
  for (const adminId of admins) {
    try {
      await bot.telegram.sendMessage(
        adminId,
        `üéâ –ö–æ–º–∞–Ω–¥–∞ "${team.teamName}" –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–∏–∑ –∑–∞ ${completedPointsCount} —Ç–æ—á–µ–∫!\n` +
        `–ü—Ä–æ–º–æ–∫–æ–¥: ${prizeConfig.promoCode}\n` +
        `–ö–æ—Ñ–µ–π–Ω—è: ${prizeConfig.cafeName}`,
        { parse_mode: 'Markdown' }
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}:`, err);
    }
  }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏–∑–æ–≤
 * 
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
 * @returns {Promise<void>}
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–æ–≤ –≤ —Ñ–∞–π–ª–µ,
 * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
 */
async function handleClearPrizesConfirmation(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  const prizes = readPrizes();
  const prizeCount = Object.keys(prizes).length;

  if (prizeCount === 0) {
    return ctx.reply('üéÅ –§–∞–π–ª –ø—Ä–∏–∑–æ–≤ —É–∂–µ –ø—É—Å—Ç!');
  }

  ctx.reply(
    `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–∑–æ–≤?\n\n` +
    `–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${prizeCount} –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.\n\n` +
    `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
    {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å', 'clear_prizes_confirm')],
          [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'clear_prizes_cancel')],
        ],
      },
      parse_mode: 'Markdown',
    }
  );
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø—Ä–∏–∑–æ–≤
 * 
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
 * @returns {Promise<void>}
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –ø—Ä–∏–∑–æ–≤ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–∏–∑—ã —É –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥,
 * –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 */
async function handleClearPrizesConfirm(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  try {
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏–∑–æ–≤
    writePrizes({});

    // –û—á–∏—â–∞–µ–º –ø—Ä–∏–∑—ã —É –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    const teams = services.team.getAllTeams();
    teams.forEach(team => {
      if (team.prizesReceived && team.prizesReceived.length > 0) {
        team.prizesReceived = [];
      }
    });
    services.team.saveTeams();

    await ctx.reply('‚úÖ –§–∞–π–ª –ø—Ä–∏–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! –í—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã —É–¥–∞–ª–µ–Ω—ã.');
    await handleAdminPanel(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–∑–æ–≤:', err);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–∑–æ–≤.');
  }
}

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ –ø—Ä–∏–∑–æ–≤
 * 
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–±–æ—Ç–∞
 * @returns {Promise<void>}
 * 
 * @description
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏–∑–æ–≤,
 * –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 */
async function handleClearPrizesCancel(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;

  await ctx.reply('‚ùå –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await handleAdminPanel(ctx);
}

// ======================
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// ======================
bot
  .launch()
  .then(() => console.log("üé¨ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
