const { Telegraf, Markup } = require('telegraf');

require('dotenv').config();

const TeamService = require('./services/TeamService');
const QuestService = require('./services/QuestService');
const AdminService = require('./services/AdminService');
const locales = require('./data/locales.json');
const keyboards = {
  mainMenu: require('./keyboards/mainMenu'),
  pointSelection: require('./keyboards/pointSelection'),
  admin: require('./keyboards/adminKeyboard')
};

const services = {
  team: new TeamService(),
  quest: new QuestService(),
  admin: new AdminService()
};

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const teamOptions = [
  { name: "–ë–µ–∑—É–º—Ü—ã —Å –ø–æ–ø–∫–æ—Ä–Ω–æ–º", id: "team_1" },
  { name: "–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø–ª–∏–∫–∏", id: "team_2" },
  { name: "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ", id: "team_3" },
  { name: "–ö–∏–Ω–æ –ø–æ-–±—Ä–∞—Ç—Å–∫–∏", id: "team_4" },
  { name: "–û—Ñ–∏—Å–Ω—ã–µ –∫–∏–Ω–æ–∫—Ä—ã—Å—ã", id: "team_5" },
  { name: "–¢–∞–π–Ω–∞ –∫–∏–Ω–æ–∫–æ–∫–∞", id: "team_6" },
  { name: "–ö–ª—É–± '–ö—Ä–∞—Å–Ω–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞'", id: "team_7" },
  { name: "–ß—ë—Ä–Ω—ã–µ –∏–∑ —Å—É–º—Ä–∞–∫–∞", id: "team_8" },
  { name: "–•–∞–±–µ–Ω—Å–∫–∏–µ", id: "team_9" }
];

// ======================
// Middlewares
// ======================

bot.use(async (ctx, next) => {
  if (services.team.isTeamRegistered(ctx.chat.id)) {
    ctx.team = services.team.getTeam(ctx.chat.id);
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (services.admin.isGameActive) {
      return next();
    }
  }
  
  const exemptRoutes = ['/start', 'team_', '/admin', 'top_', 'reset_'];
  const isExempt = exemptRoutes.some(route => 
    ctx.message?.text?.startsWith(route) || 
    ctx.callbackQuery?.data?.startsWith(route)
  );

  if (!isExempt && !services.admin.isGameActive && !services.admin.isAdmin(ctx.from.id)) {
    return ctx.reply(locales.gameNotStarted);
  }
  
  await next();
});

bot.hears(locales.gameStartButton, async (ctx) => {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  const result = services.admin.setGameActive(true);
  
  await ctx.reply(result.adminMessage);
  await handleAdminPanel(ctx);
  
  // –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
  const teams = services.team.getAllTeams();
  for (const team of teams) {
    try {
      await bot.telegram.sendMessage(
        team.chatId,
        result.broadcastMessage,
        keyboards.mainMenu.getKeyboard(false, true) // isAdmin=false, isGameActive=true
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${team.chatId}:`, err);
    }
  }
});

bot.hears(locales.gameStopButton, async (ctx) => {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  const result = services.admin.setGameActive(false);
  
  await ctx.reply(result.adminMessage);
  await handleAdminPanel(ctx);
  
  // –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
  const teams = services.team.getAllTeams();
  for (const team of teams) {
    try {
      await bot.telegram.sendMessage(
        team.chatId,
        result.broadcastMessage,
        Markup.removeKeyboard()
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${team.chatId}:`, err);
    }
  }
});

bot.use(async (ctx, next) => {
  if (services.team.isTeamRegistered(ctx.chat.id)) {
    ctx.team = services.team.getTeam(ctx.chat.id);
  }
  await next();
});

// ======================
// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
// ======================

bot.command('start', handleStart);
bot.action(/^team_/, handleTeamSelection);
bot.hears('‚ñ∂ –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç', handleBeginQuest);
bot.hears('üåç –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É', handlePointSelection);
bot.action(/^point_/, handlePointActivation);
bot.hears('üé≤ –ú–∏–Ω–∏-–∫–≤–µ—Å—Ç', handleMiniQuest);
bot.hears('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', handleProgress);
bot.hears('üèÜ –¢–æ–ø –∫–æ–º–∞–Ω–¥', handleTopTeams);
bot.command('admin', handleAdminPanel);
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', handleStats);
bot.hears('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', handleResetConfirmation);
bot.hears('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', handleBroadcast);
bot.hears('üèÜ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø', handleTopTeams);
bot.hears('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', handleMainMenu);
bot.hears('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', handleAdminPanel);
bot.hears('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', handleInfo);
bot.action('reset_confirm', handleResetConfirm);
bot.action('reset_cancel', handleResetCancel);

// ======================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// ======================

bot.on('text', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (ctx.team?.waitingForMembers) {
    return handleMembersInput(ctx);
  }
  if (ctx.team?.waitingForBroadcast) {
    return handleBroadcastMessage(ctx);
  }
  if (ctx.team?.currentMiniQuest) {
    return handleMiniQuestAnswer(ctx);
  }
  if (ctx.team?.currentPoint !== null && ctx.team?.currentPoint !== undefined) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞, –Ω–æ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
    if (ctx.team.currentQuestion === 0 && ctx.team.totalQuestions === 0) {
      return handlePointCode(ctx);
    }
    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∞–∫—Ç–∏–≤–Ω—ã
    if (ctx.team.currentQuestion !== undefined) {
      const questions = require('./data/questions.json');
      const point = questions.find(p => p.pointId === ctx.team.currentPoint);
      const question = point.questions[ctx.team.currentQuestion];
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
      if (!Array.isArray(question.options)) {
        return handleTextQuestionAnswer(ctx);
      }
    }
  }
  
  return ctx.reply(locales.useMenuButtons);
});

async function handleTextQuestionAnswer(ctx) {
  const questions = require('./data/questions.json');
  const point = questions.find(p => p.pointId === ctx.team.currentPoint);
  const question = point.questions[ctx.team.currentQuestion];
  
  const isCorrect = services.team.verifyAnswer(
    ctx.team.currentPoint,
    ctx.team.currentQuestion,
    ctx.message.text
  );
  
  if (isCorrect) {
    const key = `${ctx.team.currentPoint}_${ctx.team.currentQuestion}`;
    const currentPoints = ctx.team.questionPoints?.[key] || 10;
    
    services.team.addPoints(ctx.chat.id, currentPoints);
    await ctx.reply(locales.correctAnswer.replace('%d', currentPoints));
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—á–∫–∏
    if (ctx.team.currentQuestion < point.questions.length - 1) {
      services.team.updateTeam(ctx.chat.id, {
        currentQuestion: ctx.team.currentQuestion + 1
      });
      await askQuestion(ctx, ctx.team.currentQuestion + 1);
    } else {
      const completedPointId = services.team.completePoint(
        ctx.chat.id,
        ctx.team.currentPoint
      );
      await ctx.reply(
        locales.pointCompleted
          .replace('%d', completedPointId)
          .replace('%d', services.team.getTeam(ctx.chat.id).points),
        keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(ctx.from.id),
          services.admin.isGameActive
        )
      );
    }
  } else {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const key = `${ctx.team.currentPoint}_${ctx.team.currentQuestion}`;
    const currentPoints = ctx.team.questionPoints?.[key] || 10;
    const newPoints = Math.max(1, currentPoints - 3);
    
    services.team.updateQuestionPoints(
      ctx.chat.id,
      ctx.team.currentPoint,
      ctx.team.currentQuestion,
      -3
    );
    
    await ctx.reply(
      `‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ë–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ ${newPoints}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`,
      { parse_mode: 'Markdown' }
    );
    await askQuestion(ctx, ctx.team.currentQuestion);
  }
}

bot.action(/^answer_/, handleQuestionAnswer);

bot.action('contact_org', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏: @GeekLS");
});

bot.action('contact_support', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏:*\n@GeekLS\n+7 (978) 7975 939", {
    parse_mode: 'Markdown'
  });
});

bot.action('visit_site', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("üåê –ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç: https://ulysses-club.github.io/odissea/");
});

bot.action('show_rules', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "üéØ *–ü—Ä–∞–≤–∏–ª–∞ –∫–≤–µ—Å—Ç–∞:*\n\n" +
    "1. –ù–∞—Ö–æ–¥–∏—Ç–µ –∫–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ –ø–æ –∑–∞–≥–∞–¥–∫–∞–º\n" +
    "2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∏–Ω–æ (+10 –±–∞–ª–ª–æ–≤)\n" +
    "3. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –º–∏–Ω–∏-–∫–≤–µ—Å—Ç—ã (+5 –±–∞–ª–ª–æ–≤)\n" +
    "4. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!\n\n" +
    "‚è± *–í—Ä–µ–º—è –∏–≥—Ä—ã:* –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n" +
    "üë• *–ö–æ–º–∞–Ω–¥–∞:* 2-100 —á–µ–ª–æ–≤–µ–∫\n\n" +
    "¬´–ò–≥—Ä–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ ‚Äî –∫–∞–∫ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –∫–∏–Ω–æ!¬ª üé¨",
    { parse_mode: 'Markdown' }
  );
});

bot.action(/^show_map_/, async (ctx) => {
  const pointId = parseInt(ctx.callbackQuery.data.split('_')[2]);
  const questions = require('./data/questions.json');
  const point = questions.find(p => p.pointId === pointId);
  
  if (point && point.coordinates) {
    await ctx.replyWithLocation(
      point.coordinates.lat,
      point.coordinates.lng,
      {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps',
              url: `https://maps.google.com/?q=${point.coordinates.lat},${point.coordinates.lng}`
            }],
            [{
              text: 'üìç –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö',
              url: `https://yandex.ru/maps/?pt=${point.coordinates.lng},${point.coordinates.lat}&z=17&l=map`
            }]
          ]
        }
      }
    );
  }
});

// ======================
// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
// ======================

async function handleStart(ctx) {
  if (services.team.isTeamRegistered(ctx.chat.id)) {
    const team = services.team.getTeam(ctx.chat.id);
    const isGameActive = services.admin.isGameActive;
    
    if (team.waitingForMembers) {
      return ctx.reply(
        locales.addMembers,
        Markup.removeKeyboard()
      );
    }
    
    if (!isGameActive && !services.admin.isAdmin(ctx.from.id)) {
      return ctx.reply(
        locales.alreadyRegistered + "\n\n" + locales.gameNotStarted,
        Markup.keyboard([
          ['üèÜ –¢–æ–ø –∫–æ–º–∞–Ω–¥', '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        ]).resize()
      );
    }
    
    return ctx.reply(
      locales.alreadyRegistered,
      keyboards.mainMenu.getKeyboard(
        services.admin.isAdmin(ctx.from.id),
        isGameActive
      )
    );
  }

  const teamButtons = teamOptions.map(team => 
    Markup.button.callback(team.name, team.id)
  );

  await ctx.reply(
    locales.welcomeMessage,
    Markup.inlineKeyboard(teamButtons, { columns: 2 })
  );
}

async function handleInfo(ctx) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(locales.infoMessage, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' },
          { text: 'üåê –°–∞–π—Ç', url: 'https://ulysses-club.github.io/odissea/' }
        ],
        [
          { text: 'üé¨ –û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: 'about_project' },
          { text: 'üìä –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'show_rules' }
        ]
      ])
    });
  } catch (error) {
    console.error('Error in handleInfo:', error);
    await ctx.reply(locales.errorOccurred);
  }
}


async function handleTeamSelection(ctx) {
  const selectedTeam = teamOptions.find(team => team.id === ctx.callbackQuery.data);
  if (!selectedTeam) {
    return ctx.reply(locales.teamSelectionError);
  }

  if (!services.team.isTeamNameAvailable(selectedTeam.name)) {
    return ctx.reply(
      `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${selectedTeam.name}" —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`,
      Markup.removeKeyboard()
    ).then(() => handleStart(ctx));
  }

  const team = services.team.registerTeam(
    ctx.chat.id, 
    selectedTeam.name, 
    ctx.from.id
  );
  
  await ctx.reply(
    locales.teamRegistered.replace('%s', selectedTeam.name),
    Markup.removeKeyboard()
  );
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  services.team.updateTeam(ctx.chat.id, {
    waitingForMembers: true,
    waitingForBroadcast: false
  });
  
  await ctx.reply(
    locales.addMembers,
    Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  );
}

async function handleBeginQuest(ctx) {
  // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
  if (!services.admin.isGameActive && !services.admin.isAdmin(ctx.from.id)) {
    return ctx.reply(locales.gameNotStarted);
  }

  await ctx.reply(
    locales.startQuest,
    keyboards.mainMenu.getKeyboard(
      services.admin.isAdmin(ctx.from.id),
      services.admin.isGameActive
    )
  );
}

async function handleMembersInput(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  if (!ctx.team?.waitingForMembers) {
    return ctx.reply(locales.useMenuButtons);
  }

  const members = ctx.message.text
    .split(',')
    .map(name => name.trim())
    .filter(name => name.length > 0);
    
  services.team.updateTeam(ctx.chat.id, {
    members,
    waitingForMembers: false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
  });

  await ctx.reply(
    locales.membersAdded.replace('%s', members.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'),
    keyboards.mainMenu.getKeyboard(
      services.admin.isAdmin(ctx.from.id),
      services.admin.isGameActive
    )
  );
}

async function handlePointSelection(ctx) {
  const questions = require('./data/questions.json');
  const availablePoints = [...new Set(questions.map(q => q.pointId))]
    .filter(p => !ctx.team?.completedPoints?.includes(p));
  
  if (availablePoints.length === 0) {
    return ctx.reply(locales.noPointsAvailable);
  }
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ò–õ–ò –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä–∞—Ç—å
  if (!services.admin.isGameActive && ctx.team?.completedPoints.length === 0) {
    return ctx.reply(locales.gameNotStarted);
  }
  
  ctx.reply(
    locales.selectPoint,
    keyboards.pointSelection.getKeyboard(availablePoints)
  );
}

async function handlePointActivation(ctx) {
  const pointId = parseInt(ctx.callbackQuery.data.split('_')[1]);
  const questions = require('./data/questions.json');
  const point = questions.find(p => p.pointId === pointId);
  
  if (!point) {
    return ctx.reply(locales.pointNotFound);
  }

  try {
    await ctx.replyWithPhoto({
      source: `./assets/point_${pointId}.jpg`
    });
  } catch (err) {
    console.log(`–§–æ—Ç–æ –¥–ª—è —Ç–æ—á–∫–∏ ${pointId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –∏–∑ locales
  const pointDescription = locales.pointDescriptions[pointId] || "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –∫–∏–Ω–æ–º–∞–Ω–æ–≤";
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const formattedMessage = 
    `üé¨ *–¢–æ—á–∫–∞ ${pointId}: ${keyboards.pointSelection.getPointDescription(pointId)}*\n\n` +
    `üìç ${pointDescription}\n\n` +
    `üîç *–ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:*  \n` +
    `${point.locationHint}\n\n` +
    `üìù *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:*`;

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationKeyboard = keyboards.pointSelection.getNavigationKeyboard(pointId);
  
  if (navigationKeyboard) {
    await ctx.reply(formattedMessage, { 
      parse_mode: 'Markdown',
      ...navigationKeyboard
    });
  } else {
    await ctx.reply(formattedMessage, { 
      parse_mode: 'Markdown'
    });
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
  services.team.updateTeam(ctx.chat.id, { 
    currentPoint: pointId,
    currentQuestion: 0,        // –í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
    totalQuestions: 0,         // –í–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ—Ç (–∂–¥–µ–º –∫–æ–¥)
    waitingForMembers: false,
    waitingForBroadcast: false
  });
}

// validate-questions.js
const questions = require('./data/questions.json');

questions.forEach(question => {
  const hint = question.locationHint.toLowerCase();
  const code = question.code.toLowerCase();
  
  if (!hint.includes(code) && !hint.includes('–æ—Ç–≤–µ—Ç')) {
    console.warn(`‚ö†Ô∏è –¢–æ—á–∫–∞ ${question.pointId}: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Ç–≤–µ—Ç`);
  }
});

async function handlePointCode(ctx) {
  const code = ctx.message.text.trim();
  const team = ctx.team;
  
  if (services.team.verifyCode(team.currentPoint, code)) {
    // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    const questions = require('./data/questions.json');
    const point = questions.find(p => p.pointId === team.currentPoint);
    
    services.team.updateTeam(ctx.chat.id, {
      currentQuestion: 0,
      totalQuestions: point.questions.length // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    });
    await askQuestion(ctx, 0);
  } else {
    // –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
    ctx.reply(locales.wrongCode);
  }
}

async function askQuestion(ctx, questionIndex) {
  const questions = require('./data/questions.json');
  const point = questions.find(p => p.pointId === ctx.team.currentPoint);
  
  if (!point || !point.questions[questionIndex]) {
    return ctx.reply(locales.questionNotFound);
  }

  const question = point.questions[questionIndex];

  const key = `${ctx.team.currentPoint}_${questionIndex}`;
  const currentPoints = ctx.team.questionPoints?.[key] || 10;

  // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
  if (Array.isArray(question.options)) {
    const options = question.options.map((option, i) => 
      Markup.button.callback(option, `answer_${questionIndex}_${i}`)
    );

    await ctx.reply(
      locales.questionTemplate
        .replace('%d', questionIndex + 1)
        .replace('%d', point.questions.length)
        .replace('%s', question.text) +
      `\n\n*–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: ${currentPoints}*`,
      Markup.inlineKeyboard(options, { columns: 1 })
    );
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ctx.reply(
      locales.questionTemplate
        .replace('%d', questionIndex + 1)
        .replace('%d', point.questions.length)
        .replace('%s', question.text) +
      `\n\n*–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: ${currentPoints}*\n\n` +
      `üìù *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:*`,
      { parse_mode: 'Markdown' }
    );
  }
}

async function handleQuestionAnswer(ctx) {
  const [_, questionIndex, answerIndex] = ctx.callbackQuery.data.split('_').map(Number);
  const questions = require('./data/questions.json');
  const point = questions.find(p => p.pointId === ctx.team.currentPoint);
  const question = point.questions[questionIndex];
  
  const key = `${ctx.team.currentPoint}_${questionIndex}`;
  const currentPoints = ctx.team.questionPoints?.[key] || 10;

  const isCorrect = services.team.verifyAnswer(
    ctx.team.currentPoint, 
    questionIndex, 
    answerIndex.toString()
  );

  if (isCorrect) {
    services.team.addPoints(ctx.chat.id, currentPoints);
    await ctx.reply(
      locales.correctAnswer.replace('%d', currentPoints)
    );
    
    if (questionIndex < point.questions.length - 1) {
      services.team.updateTeam(ctx.chat.id, { 
        currentQuestion: questionIndex + 1 
      });
      await askQuestion(ctx, questionIndex + 1);
    } else {
      const completedPointId = services.team.completePoint(
        ctx.chat.id, 
        ctx.team.currentPoint
      );
      await ctx.reply(
        locales.pointCompleted
          .replace('%d', completedPointId)
          .replace('%d', ctx.team.points),
        keyboards.mainMenu.getKeyboard(
          services.admin.isAdmin(ctx.from.id),
          services.admin.isGameActive
        )
      );
    }
  } else {
    // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
    const newPoints = Math.max(1, currentPoints - 3);
    services.team.updateQuestionPoints(
      ctx.chat.id, 
      ctx.team.currentPoint, 
      questionIndex, 
      -3
    );
    
    await ctx.reply(
      `‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ë–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ ${newPoints}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`,
      { parse_mode: 'Markdown' }
    );
    await askQuestion(ctx, questionIndex);
  }
}

async function handleMiniQuest(ctx) {
  try {
    const team = ctx.team;
    if (!team) return;

    const availableQuests = services.quest.getAvailableMiniQuests(
      team.completedMiniQuests
    );
    
    if (availableQuests.length === 0) {
      return ctx.reply(locales.miniQuestAllCompleted);
    }

    const miniQuest = availableQuests[
      Math.floor(Math.random() * availableQuests.length)
    ];
    
    await ctx.reply(
      locales.miniQuestTask.replace('%s', miniQuest.task),
      { parse_mode: 'Markdown' }
    );
    
    services.team.updateTeam(ctx.chat.id, { 
      currentMiniQuest: miniQuest,
      waitingForMembers: false,
      waitingForBroadcast: false
    });
  } catch (err) {
    console.error('Error in handleMiniQuest:', err);
    ctx.reply(locales.errorOccurred);
  }
}

async function handleMiniQuestAnswer(ctx) {
  try {
    const team = ctx.team;
    if (!team?.currentMiniQuest) {
      return ctx.reply(locales.noActiveMiniQuest);
    }

    const wasCorrect = ctx.message.text === team.currentMiniQuest.answer;
    const updates = { 
      currentMiniQuest: null,
      waitingForMembers: false,
      waitingForBroadcast: false
    };

    if (wasCorrect) {
      const questCompleted = services.team.completeMiniQuest(
        ctx.chat.id, 
        team.currentMiniQuest.task
      );
      
      if (questCompleted) {
        services.team.addPoints(ctx.chat.id, 5);
        await ctx.reply(
          locales.miniQuestCorrect.replace('%d', team.points + 5),
          { parse_mode: 'Markdown' }
        );
      } else {
        await ctx.reply(locales.questAlreadyCompleted);
      }
    } else {
      await ctx.reply(locales.miniQuestWrong);
    }
    
    services.team.updateTeam(ctx.chat.id, updates);
  } catch (err) {
    console.error('Error in handleMiniQuestAnswer:', err);
    ctx.reply(locales.errorOccurred);
  }
}

async function handleProgress(ctx) {
  const progress = services.team.getTeamProgress(ctx.chat.id);
  if (!progress) return;

  const message = [
    `üèÜ *–ö–æ–º–∞–Ω–¥–∞:* ${progress.teamName}`,
    `üë§ *–ö–∞–ø–∏—Ç–∞–Ω:* ${ctx.from.first_name} ${ctx.from.last_name || ''}`,
    `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* ${progress.members.join(', ') || '–Ω–µ—Ç'}`,
    `üìä *–ë–∞–ª–ª—ã:* ${progress.points}`,
    `üìç *–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫:* ${progress.completedPoints.length}/${progress.totalPoints}`,
    `üé≤ *–ü—Ä–æ–π–¥–µ–Ω–æ –º–∏–Ω–∏-–∫–≤–µ—Å—Ç–æ–≤:* ${progress.completedMiniQuests.length}/${progress.totalMiniQuests}`,
    `‚è± *–í –∏–≥—Ä–µ:* ${progress.timeInGame}`,
    `üïí *–°—Ç–∞—Ä—Ç:* ${new Date(progress.startTime).toLocaleString()}`
  ].join('\n');

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function handleTopTeams(ctx) {
  const topTeams = services.admin.getTopTeams(
    services.team.getAllTeams(),
    true
  );
  await ctx.reply(topTeams, { parse_mode: 'Markdown' });
}

async function handleAdminPanel(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  ctx.reply(
    locales.adminPanel,
    { 
      ...keyboards.admin.getKeyboard(services.admin.getGameStatus()),
      parse_mode: 'Markdown' 
    }
  );
}

async function handleStats(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  
  const stats = await services.admin.getFullStats(
    services.team.getAllTeams()
  );
  ctx.reply(stats, { parse_mode: 'Markdown' });
}

async function handleResetConfirmation(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  
  ctx.reply(locales.resetConfirm, {
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback("‚úÖ –î–∞", "reset_confirm")],
        [Markup.button.callback("‚ùå –ù–µ—Ç", "reset_cancel")]
      ]
    },
    parse_mode: 'Markdown'
  });
}

async function handleBroadcast(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  
  services.team.updateTeam(ctx.chat.id, { 
    waitingForBroadcast: true,
    waitingForMembers: false
  });
  await ctx.reply(locales.broadcastPrompt);
}

async function handleBroadcastMessage(ctx) {
  const teams = services.team.getAllTeams();
  const successCount = await services.admin.broadcastMessage(
    bot, 
    ctx.message.text, 
    teams
  );
  
  services.team.updateTeam(ctx.chat.id, { 
    waitingForBroadcast: false 
  });
  
  await ctx.reply(
    locales.broadcastSuccess.replace('%d', successCount),
    { parse_mode: 'Markdown' }
  );
}

async function handleMainMenu(ctx) {
  ctx.reply(
    locales.mainMenu, 
    keyboards.mainMenu.getKeyboard()
  );
}

async function handleResetConfirm(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  
  const result = services.admin.resetAllTeams(services.team);
  await ctx.reply(result.message, { parse_mode: 'Markdown' });
  
  for (const chatId of result.affectedChatIds) {
    try {
      await bot.telegram.sendMessage(
        chatId,
        locales.resetNotification,
        Markup.removeKeyboard()
      );
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–µ ${chatId}:`, err);
    }
  }
  
  await handleAdminPanel(ctx);
}

async function handleResetCancel(ctx) {
  if (!services.admin.isAdmin(ctx.from.id)) return;
  
  await ctx.reply(locales.resetCanceled);
  await handleAdminPanel(ctx);
}

async function handleMembersInput(ctx) {
  const members = ctx.message.text
    .split(',')
    .map(name => name.trim())
    .filter(name => name.length > 0);
    
  if (members.length > 0) {
    services.team.updateTeam(ctx.chat.id, {
      members,
      waitingForMembers: false
    });
    
    await ctx.reply(
      locales.membersAdded.replace('%s', members.join(', ')), 
      keyboards.mainMenu.getKeyboard()
    );
  } else {
    await ctx.reply(locales.invalidFormat);
  }
}

// ======================
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// ======================

bot.launch()
  .then(() => console.log('üé¨ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));